apiVersion: v1
data:
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  BASIC_AUTH_USER: chart_controller
  CACHE: redis
  CACHE_REDIS_ADDR: harbor-redis:6379
  CACHE_REDIS_DB: "3"
  CHART_POST_FORM_FIELD_NAME: chart
  CONTEXT_PATH: ""
  DEBUG: "false"
  DEPTH: "1"
  DISABLE_API: "false"
  DISABLE_METRICS: "false"
  DISABLE_STATEFILES: "false"
  INDEX_LIMIT: "0"
  LOG_JSON: "true"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  PORT: "9999"
  PROV_POST_FORM_FIELD_NAME: prov
  STORAGE: amazon
  STORAGE_AMAZON_BUCKET: bucketname
  STORAGE_AMAZON_REGION: us-west-1
  STORAGE_TIMESTAMP_TOLERANCE: 1s
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
---
apiVersion: v1
data:
  _REDIS_URL_CORE: redis://harbor-redis:6379/0?idle_timeout_seconds=30
  _REDIS_URL_REG: redis://harbor-redis:6379/2?idle_timeout_seconds=30
  CHART_CACHE_DRIVER: redis
  CHART_REPOSITORY_URL: http://harbor-chartmuseum
  CONFIG_PATH: /etc/core/app.conf
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CORE_URL: http://harbor-core:80
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: https://core.harbor.domain
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_URL: http://harbor-jobservice
  LOG_LEVEL: info
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  NOTARY_URL: http://harbor-notary-server:4443
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,jfrog-artifactory
  PORT: "8080"
  PORTAL_URL: http://harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: 192.168.0.1
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: user
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_STORAGE_PROVIDER_NAME: s3
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
  TRIVY_ADAPTER_URL: http://harbor-trivy:8080
  WITH_CHARTMUSEUM: "true"
  WITH_NOTARY: "true"
  WITH_TRIVY: "true"
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
---
apiVersion: v1
data:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
---
apiVersion: v1
data:
  CORE_URL: http://harbor-core:80
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice-env
---
apiVersion: v1
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
---
apiVersion: v1
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      s3:
        region: us-west-1
        bucket: bucketname
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
---
apiVersion: v1
data:
  CACHE_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
type: Opaque
---
apiVersion: v1
data:
  CSRF_KEY: QUxhbGN0TjNBYjNuVDRqSmVXa2JXaVM4QVF2QVoxeTQ=
  HARBOR_ADMIN_PASSWORD: SGFyYm9yMTIzNDU=
  POSTGRESQL_PASSWORD: cGFzc3dvcmQ=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  secret: RTU5d3FETFVTQTREdUxwdQ==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
type: Opaque
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUlLNmRwZk5POWJWVXJ1UXNNNjd2RWN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TURFd05qQXpNelUxTWxvWERUSTBNREV3TmpBegpNelUxTWxvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFvalZ3T1FrS1pzN0RKaVpKc1N1cEhBM2xRdWV4Nk42aWs3Uk5KQ3lWZTRzMUZqNSsKUjBpQlVGRThuUTVLU0xFd2l5M3hzWkovRnFqbk1SOTE3TGF2dkllRnZlRDBPeEVKNm1ueSs1SGQ0NG5MWVppbwpuOUs1cGxzYmFTMkVKeWhlcTlDZUNFaTNrZERld0lnWE9BSUFaeEFqcU42dXJKTXJ1VjdDdzZ4RTl1cVZScnJhCjBUamFvOGhNWjlFdzJEVTNmWUViN1ZtcUpUTURHRDFDak5sQ2g1TTRmOExFVEhHeVVPR0ZlSXhIN2NubE9JZkgKMEVlRXpNaWNBSG82cDU4UDk3YTN4MlI3SnN6a09hc1QwNkVRNWFabktCb3BKSHFydEZCQmlOSlh0UVBvdWpWQwp6YlBXck0vbzNIQ2I1M3pGSUZqRmJRL3dxNndzVGdVUC9KN3dxUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRTkyU1ZMZ0JNMDhjby92M2tZT2NSS3JDSEJhTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2JJS3BQYXg3VXRoSW9hbnhGVlhzc08vNHhsYVA4QmZ0ZldYQ2x6MnQ5U2N3TDZoNEphVXZpClpFYVM5eXVnODF1Z056azF0Z2lRTklBRitjK1pMT3ZMTjN6ZmVUNll3emdFYVBMa3NkK21haUVNVkJjY3BpR00KVmVoc2ozM216cmptUjROaGJ6WkxsRlowM2l6cU83ZFhrak1CL2dFUkF6bWZzQWppb2FtOC9YaTZXMTRtblA1VAprZTIyTVpTd0lGV0U1VHRzdm1xa2JoaUNRU1o4QjlBYlcrZEVROURmMk9OTzRXMHJFN09rd3FDS095enhzRldoCk1kZWR0dGFzMjdkSERRbndwdHRaWHpPV3ZoNEJoVXRTSTlUNzc0OHZsYUNCRjBzaUpMSC9laW1tbjE2S04wYy8KVjRaeHhXR0c5UnNMS0NBWkV1bCtoeTNaUnpzYmJDK2UKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUsrRUpkN1hoZmIybE5nbFJ6ZlFXSll3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TURFd05qQXpNelUxTWxvWERUSTBNREV3TmpBegpNelUxTWxvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0T1BEdThYQmxIS0FEbGNCRmppbTUybHNWNnRIWmluNVZtRmoKUzVTWVBCU1h2QTE3cHpVRFRSTjZsZ0g0R29QMlFYTXpyUkU1bUVPUTg2ek1BbmpwaGlIS2RGc0ZISjJzU000eApKT3RiVHZPRU03dUdra1JXKzFLenJMQ2wrU2htYThlOWhKd0V6ZU1sRHo4SHJCL0VPcFJRVXRHb0dSeVZDaUtSCkZzQzZ0ZUlmclpzR2lsSS90djhMRDlEYmxMWFlqVTJTSXg2YW1aa1ZuTk1mZXBaTG9XTVFVaHJ2cjhWYmZHUG8KRndtRXdHc3docGN4amJueEdLaDdKdWx1bHE4RXZJa3NodHc3NnVDdWZDVWhwNzFTOSswL0djOXVTSHViSWswSApoTW15T2tkY0ljeVVJSE5xcUQvemJPVmMrRVRzSmp0emloMkdvOFYyNXV6dTA0U3g5d0lEQVFBQm80R1dNSUdUCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlJQZGtsUzRBVE5QSEtQNzk1R0RuRVNxd2h3V2pBegpCZ05WSFJFRUxEQXFnaEpqYjNKbExtaGhjbUp2Y2k1a2IyMWhhVzZDRkc1dmRHRnllUzVvWVhKaWIzSXVaRzl0CllXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI1UHJnRmFoT3lUSElISCtpeTY5a3dGMzJoZ29jRUxlMkIKc2N6ZnN2QU1xRHJjWHhBUkh1ZnZnblg3cTF2K1BBbDVaWGo3RXZRcGx3YnFCZ2lVNVJEcWNxajR5N3hiRG1MSgo4cERvaXlvVHk0TnZsTmszdXFLNHpuL1BwTTExS0UzVmJadXFEZ09jRUdJT0pNMGY1V2d1WFdTWEo2T1dsT2Z2CkpsRjV3d1J3dDVhaGNScDNzUkxaejNaVGZXYTZzQU5tN1JIVDRjTlozbGxZMzgyQ2xwWXoyeVBxMExYblRlZ1gKUjdDMldpNEdtUWRESWozSVJwNFRoRG5GMHhXM0V1UEtBbzN6UE5xUGRuUGxpcFZpRVRMcDFlR0Y2ZzFmVnJZMwp5S3F0NUcrVjdLY0E3em5HVEdTTXE0NW44a0xzWURuVHc3K1c2QlVCSFZKbHcyV2YwSm53Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNE9QRHU4WEJsSEtBRGxjQkZqaW01MmxzVjZ0SFppbjVWbUZqUzVTWVBCU1h2QTE3CnB6VURUUk42bGdINEdvUDJRWE16clJFNW1FT1E4NnpNQW5qcGhpSEtkRnNGSEoyc1NNNHhKT3RiVHZPRU03dUcKa2tSVysxS3pyTENsK1NobWE4ZTloSndFemVNbER6OEhyQi9FT3BSUVV0R29HUnlWQ2lLUkZzQzZ0ZUlmclpzRwppbEkvdHY4TEQ5RGJsTFhZalUyU0l4NmFtWmtWbk5NZmVwWkxvV01RVWhydnI4VmJmR1BvRndtRXdHc3docGN4CmpibnhHS2g3SnVsdWxxOEV2SWtzaHR3NzZ1Q3VmQ1VocDcxUzkrMC9HYzl1U0h1YklrMEhoTW15T2tkY0ljeVUKSUhOcXFEL3piT1ZjK0VUc0pqdHppaDJHbzhWMjV1enUwNFN4OXdJREFRQUJBb0lCQUNGbUVocWY2dmpsN0ZpMAoyU2Q0c0dqcndqaGU2cEtrcHpBSjlKb3o3a3YxN3ZieHRheUdkZ0FMWlloRHNKb1hnUW9GVnVaY0NZYXdlaVdHClF5SVczTytic3hxR3JnS3E4L3c0Q3hwbGpjRHk3MjVUYWsvc3NGSlEzUGhIbjg2YURtUHhYUmNGcUx6Ky8vRDgKdG1IOHNjTFZaZngyd0pWQ0pteEQ1L0pPR3l5SnFqRm1EbGdnWkdxWXd5Z1J1Mk13dzRrem9pWW5zTld1dzYzOApVVktBRW5PMU5UTkQ3cjlwVmhUb2hWRDlvd3B4WXQrODRyYUt4a2Vjc05HQ2dYWU5kbTNXZXR1OGwwMVFaWWZGCng4SUhXNUNYRU1PNzhpRjNyNTFhYk8zdDUyMnhBVjJSM1BuTDBoWDRlZGlRSms1Q2ZBS09kU3Y3eFFuc1dEV3AKL09Td2Fia0NnWUVBL2pRWU1qYVg2RXNCMldoUzFVaFZzc3htRGVONDdxV1FEZWNqc3dJVnNvVFR6NFBrbGlaSQp5MGtwQ0xsRGoyOGwraHZYdkJ0UGdQeUdDbTJIcE12YzVaOVNKVC8rR21kbHI3UmMrcVo4OStud0lsYk5wS2ZkCjJqQjlsbklBN3QzT3JETHp3c3BKTFFaZWxrbFFCWWFoM3JTRDdaNGFtSW9vTzViTmV6RlUrMU1DZ1lFQTRucWkKc0M3VkxveGpoQ3MrU0QxOENQclJTQzRIWW9pblZYMzZJKzhRQm8ra0ZrTW1FWHh3UGFnN29SOG1GNTBQOFMrbgpLNEFBVUIyOVlDeThOMXBUOXBNTk1JTlo0Yy9ldzRzUmFxSVBlRytHK3NJWUViWUg5Y2pvdzJxY3BSSlhHUVdRCjYxVUtFNEJvdUZxdnpodmxwSXkzam53ZmhTTEIzZ1RDL0F1dFBrMENnWUFMQUE0Yi9pak1zSkkvNmpmTGF2bnEKWnRYenUrZzd5NFpVVTdCRHlzOU5qbG5zSFBVRFdsekVEMEpyVWprT04rMFl5YU9vVERaQWlxenlQcE1rR241UQpvWGhZakZCZXJDTEdXN082VlFJTGFHQXYzRG5CNmxHN1kyWEw0TnNSZXgrNmErb0lmK0J5eGxmSmdScXBZbzRXCnFSRWNjejhMWXM4aTVQKzNXUWNvYVFLQmdDMi9ROWwrdkVVWXlvbEtDdHlndnNzNWpzaWJzNVl0c0U5T2tSWnQKRmJtZGpqR0pBc21KYjBxbER0WnU2a3pleHZlYS9wT0UyWXRWVm9sMHY5Z1dnTnRQdk54Tnkvd1c5eEpjcHZuNQpIbExmaEU1bW9tSUJlUDRteFEya0hWd2lwa0ZCcEpKRXJUSmZQOGZ0V1pHeWhPS0dJaFcvOE1YOXpWZEJjdmxpCmltNEpBb0dCQU9vSTJUeDJ5Z2RDWGppUVhSRmdpUXNyajZJaVlZbFVxTEJOTzRlTjZFMlVzcURRcDQrcE9aTmIKam10a3dzWWt5ZnlSWlJLbHhHY2FYTFlnWk4yT0lTeE5xcVRwV3V1SXk4dktpY01FY0VZR3dQWDYzY1ZYNElJNApFajl5aUJTam9tT2FTYzBZQlhyWEI0ZjRNUms1ZEs2WUVPc2ExZjNQMlluMllZMlhpS3RtCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
type: kubernetes.io/tls
---
apiVersion: v1
data:
  JOBSERVICE_SECRET: MXdrenZ4NVphbmJjRzl4Ng==
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
type: Opaque
---
apiVersion: v1
data:
  NOTARY_SERVER_DB_URL: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQDE5Mi4xNjguMC4xOjU0MzIvbm90YXJ5X3NlcnZlcj9zc2xtb2RlPWRpc2FibGU=
  NOTARY_SIGNER_DB_URL: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQDE5Mi4xNjguMC4xOjU0MzIvbm90YXJ5X3NpZ25lcj9zc2xtb2RlPWRpc2FibGU=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQU5KdG5NaWNNdGZNZWdadDdHeEJjWXN3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNekF4TURZd016TTFOVEphRncweQpOREF4TURZd016TTFOVEphTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFES0REaFFoSmsvejh5QjZZK292TUY1RVFhMkdlRFkKRUhnOWZyL084eTQ4MFpZelA1YUtZdGdncE5tSHBaVDZqazhER2dxbzFLREFGYXNtYk42TUlnQ2ovRlZod3lNSApjRS92NXJaTTVuZkNIVk52b0JmcUhLem0xZnNzcVh1NlA4b2l5SXAzcTFKTmI4eXVrcEQyQ1QvWWp2alVjUkZzCkwyOVFTcGxPL3pTRmlqNzAyRndDR1hSYjhqYlc0M09mdnhpd0FKSGRSQWVLU1BHRS9ocnV5MmNTZnlxT01TZjIKdWIzTTBaZkV1d0ZnMzdicDVjdHJxazcyeEZ5ckdrK1R0amJDbWo0SVVGQ0d3YitHbGszbml2MzliMC82OXlzcAp2d0dzNDhWc1JTNkx3eXhRcjJVSWtRRnhTZUhyOEUyd0M4bGFvdXpJUUxSQTkrc05KaC8rMmJWVEFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWZKeTY3QmNIK3EraTN6ODh4NEF2VzRwVQp4M2N3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUtXQy96Zytza043N0FaclcyaEcvazN6ZHRvdXV3eFpWci9wCk5xU2lUL2g3Uzl1V21jWGU5RitXUXluSEFQZTdrSEZPWGoyMzM0cGpIVU1hL1hYTHlCdHNhelNIMWxzZnp0aC8KbVdERUFIdDlCbGlZVENjS3A1TXNuSStEaUhIbDJ2NzMzSStZakhFMVN2ZHVERzZERWFPRW00ZUp2V3JnUXRLcQpwQ1N1bkNkOUIrWmdVcWt5R0tzYi85S1JINnR2YzZKbGdjN05DZlMxQlFNK0IxSkhIOWc4VHhNV0IxaVl0bFNVClE0L09hWC9reXpibGtDV2tEbHNJbk1Dd29FcmFNUWp6RlFqSDlEdkp6TnVNMGh6VXFjNTdKU3NjTjN4cmk5NFQKTFlqcUtJRHhsdWZpWUZXdFJ1T3JvZFZQVStXaG5PVmxLakdsYWdUVGhnMmNsemZPQUNRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogImhhcmJvci1ub3Rhcnktc2lnbmVyIiwKICAgICJwb3J0IjogIjc4OTkiLAogICAgInRsc19jYV9maWxlIjogIi9ldGMvc3NsL25vdGFyeS9jYS5jcnQiLAogICAgImtleV9hbGdvcml0aG0iOiAiZWNkc2EiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vdXNlcjpwYXNzd29yZEAxOTIuMTY4LjAuMTo1NDMyL25vdGFyeV9zZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vY29yZS5oYXJib3IuZG9tYWluL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vdXNlcjpwYXNzd29yZEAxOTIuMTY4LjAuMTo1NDMyL25vdGFyeV9zaWduZXI/c3NsbW9kZT1kaXNhYmxlIiwKICAgICJkZWZhdWx0X2FsaWFzIjogImRlZmF1bHRhbGlhcyIKICB9Cn0=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURSekNDQWkrZ0F3SUJBZ0lSQUk5L2U3UnNlWktXYWFSYTlJSUViT1l3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNekF4TURZd016TTFOVEphRncweQpOREF4TURZd016TTFOVEphTUI4eEhUQWJCZ05WQkFNVEZHaGhjbUp2Y2kxdWIzUmhjbmt0YzJsbmJtVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE1elpWdURzY2FKTjJObHpxVUhVQVhpaEQKUEhpbkRMNnI1RURuVFV3TThzcStIMjdPbnovQlY5NEw1elJ1VURmYzNWWVMya1hoSXpBTW1QTDRHMnlnRk5vZApaOTlsbTc4OEt4UnJQcEthVEdUb2dRRHozTXJSN29zYVljbTZTajNSWG9CaXVyd1hFTVdzMG9ydDY4dkNFdzBwCk9YRnJyazZBWlFReTRZQ0JWQ3JOVlN3cVlHZEVlSkJSbzk5MFF5SjlQY3p1UTIwd0JrZFNXUmNwci9VeFFFdTgKZFFiZW0zMHlSVU5Ea083dnJQbXdFZEVqazhjN0ppWTl5Q1NoSDJrbkJDZFY3SjVwVVY5MEkxcHRnVEhTc1JHTAp5VEtaT1RUYjQ4UmIyRzU0UlVWbkRIb2NMOGY5OHBJNmNyYm5qeFYwVGdVT3VWak42TUhpeUdLTGxyQ3Rmd0lECkFRQUJvNEdCTUg4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSHljdXV3WEIvcXZvdDgvUE1lQQpMMXVLVk1kM01COEdBMVVkRVFRWU1CYUNGR2hoY21KdmNpMXViM1JoY25rdGMybG5ibVZ5TUEwR0NTcUdTSWIzCkRRRUJDd1VBQTRJQkFRQXpNeGFKdFpVYUI4QUVlTjU2a0ttMExBL2JpSDNNOTE1Ymo4dUxORklMdGlKam0zVGsKZWYyakZuTjc5WUhMa1hER2JadndYelYydjVEVExSNGxWNWF5UVAzM3ZxcjFBZmQyTmJ6RkpGcmhNei9FdnNPOQpGRTdBWlZ0T2xwa2hjOEh2ZXlUZFh3UTdJbXZVNGpZMDRVbm40S1FNcHIra2NOZjE5bTlVS01GNUJ0TlNpekRhCmdvZ29xQTl4UkZ0TTBsM0RRY1orM1RSZjRSaHpnazFrcUpoUjF5TUFJVk1xamkyT3hQOW9WOUNCQ25lMXFVUVUKUEJGRlhQcWtWcTlweGVQY3BzMWVOK2pLTlE2ZHFFOTZlc2Z4K0txL0NIMnFOdlZyc2JOL3RnUWhvS1l0MDlWYwpzL2thNmJ2eFNldGJUQlJndkZHU1BUYm1nNmRCQXJNWHNnUXIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNXpaVnVEc2NhSk4yTmx6cVVIVUFYaWhEUEhpbkRMNnI1RURuVFV3TThzcStIMjdPCm56L0JWOTRMNXpSdVVEZmMzVllTMmtYaEl6QU1tUEw0RzJ5Z0ZOb2RaOTlsbTc4OEt4UnJQcEthVEdUb2dRRHoKM01yUjdvc2FZY202U2ozUlhvQml1cndYRU1XczBvcnQ2OHZDRXcwcE9YRnJyazZBWlFReTRZQ0JWQ3JOVlN3cQpZR2RFZUpCUm85OTBReUo5UGN6dVEyMHdCa2RTV1JjcHIvVXhRRXU4ZFFiZW0zMHlSVU5Ea083dnJQbXdFZEVqCms4YzdKaVk5eUNTaEgya25CQ2RWN0o1cFVWOTBJMXB0Z1RIU3NSR0x5VEtaT1RUYjQ4UmIyRzU0UlVWbkRIb2MKTDhmOThwSTZjcmJuanhWMFRnVU91VmpONk1IaXlHS0xsckN0ZndJREFRQUJBb0lCQVFDRlN5ZkQzQ0FXa2R5MgpubjVlLy9URVU0WGZtTmNGVys4UTJmSCs5L2NIQ2FidHpCM0daU1Q3bVFGWHV6eFZkcjhYd3dWL1hJWGNtVmpKCjNGajR4bmpMVEt0ak5NRUpOd2hpOVpTV01FSlFCR1NkNm9Tc0p5azcwbW5WTWt6NWZBWDE2eUgvOFd1Q3VkTlcKVmMyd0FIblVMZVEwUDVVS21pc2ZFWHFiMGsrOHl3OTNkLzB6b2NUSHUyVlNNQjZNZUxvMEltSkFqMlBUQVIwdgpwT09Wb296N2FKZE9nWmh4WlpvM1JPUkY3NWNIZWpEM01Ya3VGRFNVMXZXK0EwUk1TUVNLc0J3Mk4vSkZ1VWFQCmdEKzJrNCtXN1RXOVNTNHZsTTdDK29UTGxOcVVJWWRpSXBRZWRSQTdnbXMvYWFrTW5GUXlBSElKbURORlBtY3oKblZ2U1pKb3hBb0dCQVB6VTRVUFlOWXY4UkFrQnpXalFWS1VwL0wrWkdyRmVtRWNHNEJCR05hRU1objBOUWFWQwpNbkVUVE02dzhORStqZ01xZjFCNHZjQVBnRWUvOElqZUxpOGRSTUwrQ1J2d01ESVZDK1dNNSs5N1lSN0w3TDRqCjlkak9EYjdhTldVRHMzUHArcFhuQ3lkRGFyd2ZlL1dpeldQUjMwOHU3WW9mem9mK1lrYWxHcTVGQW9HQkFPb2MKR05aRjJubEkrai96RHI4cDJSMUFhQytlL3VTMVNIVm8vcUs5WEJQOWVRc01lMXpBZjlhV1EwdlY3TVE1emtKUAo3d1RHVGR0WnlRQklyS0h3dWRoQzVSTXF1UzdncW5xdW1lSGdQTWc5Tkd6NDhaaTY1RjArY0xQMlNNRE5kZlN1CmtPSFlGeFlneXNoejJ4Nm5ocGxJeS9oQXpsalNEek1tcVhMNnhWcnpBb0dCQU00ZjZEOWRwOW9tb25rTlpSL00KcVJXMmMzN3BIWi81VlFDakZFMXdVQXlxbjRLWUtpckhHMFNnelgrOU5iZ0IzZG1xN2Z6M1V3dWdGNTluVm56ZgpWcHZHcXVhbUlWc0xxTjlMMVZVaVdYMGZBNEVPRkVhNEhwalE5TmZpSXFIbU1JbVIrbC8zNjFucFZyMWtsYlVmCk0zL3IvTGticzBGbXlRU0tXaWpxTmlSWkFvR0FUUzhjUlREY21kWWtvNGJZR3RDS1EybWpyK2Vrcy9UTXdlRHUKNnVxeGUrbTZ5WmpBNTFDVUZVU1BSV1p2WERhT3VUQXZab3lXeUxYdVhnaVgyZ0JLMVhFZ28xUVhuOHYwaU9RZAoyZW1iUUkxbFJuUkEreERMRDY3eGEzUE1ncng2b2tRWGdrNUROa2x6Y2VrNG1mK3prYi85ZDRpdVAzeHFCSHcvCnE2ZmYvMThDZ1lFQTdTUURhY2NucW56eWltdWRnYkFBYUFaMUZvWlhrZGE0M3ZNelFHRnVnbkwyZ1pXaXppNC8KYUNNaEx1Qi9CeGpodndzcEwzUmVtV1ZwRGU1WVVTWjRxUE1WVTNENWFDbm5KbTdJaXBlaEIyVzNXWjlxY1l3TwpmZ1NMZXBLMENSUUQ3L1MyYktBRE5JUFlWRThIenAyZVhvRFlhYkpTOTRxR0ptV1ZDRFR5dXZVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary
    heritage: Helm
    release: harbor
  name: harbor-notary-server
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTTP_SECRET: dEc0bjU2VkFZRzFzMVA0RA==
  REGISTRY_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJEprTzRrV3dkaUdVMGlQd3o3eEpxVy56eVVyLzVXNlN6SHdCcTBrSkdHcGp5Yzc2Q3UvNTZ5
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry-htpasswd
type: Opaque
---
apiVersion: v1
data: null
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
type: Opaque
---
apiVersion: v1
data:
  gitHubToken: ""
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
spec:
  ports:
  - port: 80
    targetPort: 9999
  selector:
    app: harbor
    component: chartmuseum
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
spec:
  ports:
  - name: http-web
    port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
spec:
  ports:
  - name: http-jobservice
    port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-notary-server
spec:
  ports:
  - port: 4443
  selector:
    app: harbor
    component: notary-server
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-notary-signer
spec:
  ports:
  - port: 7899
  selector:
    app: harbor
    component: notary-signer
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-redis
spec:
  ports:
  - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
spec:
  ports:
  - name: http-registry
    port: 5000
  - name: http-controller
    port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
spec:
  ports:
  - name: http-trivy
    port: 8080
    protocol: TCP
  selector:
    app: harbor
    component: trivy
    release: harbor
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice-scandata
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: chartmuseum
    heritage: Helm
    release: harbor
  name: harbor-chartmuseum
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: chartmuseum
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: d63e509bb4c31cf6f27b3d43048e5419cd02f1e1c036c8701f01443156460d33
        checksum/secret: a656851d5f972f5f6dd05a5c13a5a0b21527971b9ec7dd91ce85b5699d41790a
        checksum/secret-core: 271f82ff352ea476d82054eaf92fd53a3c37412e7538da9777a15645634e8164
      labels:
        app: harbor
        chart: harbor
        component: chartmuseum
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: BASIC_AUTH_PASS
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: AWS_SDK_LOAD_CONFIG
          value: "1"
        envFrom:
        - configMapRef:
            name: harbor-chartmuseum
        - secretRef:
            name: harbor-chartmuseum
        image: goharbor/chartmuseum-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9999
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: chartmuseum
        ports:
        - containerPort: 9999
        readinessProbe:
          httpGet:
            path: /health
            port: 9999
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /chart_storage
          name: chartmuseum-data
          subPath: null
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
      - emptyDir: {}
        name: chartmuseum-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: 6daa2c9bea1831f4c5ca191ce2f63e916b7b9c40cd3c3d94ac6d84299322a5a0
        checksum/secret: 2b6d2da76fac820599477373902a07bfcd4f91cac72b2dbd53579f72087b3893
        checksum/secret-jobservice: 60b960757faf53ae13b115f06d0fccf84f8b2b388f5e7cd315007d9467b11570
      labels:
        app: harbor
        component: core
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: JOBSERVICE_SECRET
              name: harbor-jobservice
        envFrom:
        - configMapRef:
            name: harbor-core
        - secretRef:
            name: harbor-core
        image: goharbor/harbor-core:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          periodSeconds: 10
        name: core
        ports:
        - containerPort: 8080
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          periodSeconds: 10
        startupProbe:
          failureThreshold: 360
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/core/app.conf
          name: config
          subPath: app.conf
        - mountPath: /etc/core/key
          name: secret-key
          subPath: key
        - mountPath: /etc/core/private_key.pem
          name: token-service-private-key
          subPath: tls.key
        - mountPath: /etc/core/ca
          name: ca-download
        - mountPath: /etc/core/token
          name: psc
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          items:
          - key: app.conf
            path: app.conf
          name: harbor-core
        name: config
      - name: secret-key
        secret:
          items:
          - key: secretKey
            path: key
          secretName: harbor-core
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: harbor-ingress
      - emptyDir: {}
        name: psc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 41138a089428e6776014e59b1a37c5e69bedc9331ccdb1f382f1950882ec1b7e
        checksum/configmap-env: 5c0e2cf333f81a4f19f13c25cb45f2b2f5353c9bd05f59e8cbb6b59cc0eb7195
        checksum/secret: 142923e982e2d395a0c2167a61594a2d4ec77dcd50aa8bd769d479ac3601d298
        checksum/secret-core: 05eebf2424684db78af951c1841fdb3d1260c5bb54d54bbbaab2a9e420c57025
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        envFrom:
        - configMapRef:
            name: harbor-jobservice-env
        - secretRef:
            name: harbor-jobservice
        image: goharbor/harbor-jobservice:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: jobservice
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/jobservice/config.yml
          name: jobservice-config
          subPath: config.yml
        - mountPath: /var/log/jobs
          name: job-logs
          subPath: null
        - mountPath: /var/scandata_exports
          name: job-scandata-exports
          subPath: null
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          name: harbor-jobservice
        name: jobservice-config
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
      - name: job-scandata-exports
        persistentVolumeClaim:
          claimName: harbor-jobservice-scandata
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary-server
    heritage: Helm
    release: harbor
  name: harbor-notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: notary-server
      release: harbor
  template:
    metadata:
      annotations:
        checksum/secret: 826c094ae2a17777627a3cdec95194ae80f8f15cd68aa5591f9eda87d73de5bc
        checksum/secret-core: fcc4edb18969106785ad281ab1576844dd76cab7f3858587dce848e178a47acb
      labels:
        app: harbor
        chart: harbor
        component: notary-server
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          valueFrom:
            secretKeyRef:
              key: NOTARY_SERVER_DB_URL
              name: harbor-notary-server
        image: goharbor/notary-server-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_notary_server/health
            port: 4443
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: notary-server
        readinessProbe:
          httpGet:
            path: /_notary_server/health
            port: 4443
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/notary/server-config.postgres.json
          name: config
          subPath: server.json
        - mountPath: /root.crt
          name: token-service-certificate
          subPath: tls.crt
        - mountPath: /etc/ssl/notary/ca.crt
          name: signer-certificate
          subPath: ca.crt
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
      - name: config
        secret:
          secretName: harbor-notary-server
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: notary-signer
    heritage: Helm
    release: harbor
  name: harbor-notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: notary-signer
      release: harbor
  template:
    metadata:
      annotations:
        checksum/secret: e5184fefabd30c8f245e987f47a3c021203dca50e148e1fabb959feb688ec14b
      labels:
        app: harbor
        chart: harbor
        component: notary-signer
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          valueFrom:
            secretKeyRef:
              key: NOTARY_SIGNER_DB_URL
              name: harbor-notary-server
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        image: goharbor/notary-signer-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 7899
            scheme: HTTPS
          initialDelaySeconds: 300
          periodSeconds: 10
        name: notary-signer
        readinessProbe:
          httpGet:
            path: /
            port: 7899
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/notary/signer-config.postgres.json
          name: config
          subPath: signer.json
        - mountPath: /etc/ssl/notary/tls.crt
          name: signer-certificate
          subPath: tls.crt
        - mountPath: /etc/ssl/notary/tls.key
          name: signer-certificate
          subPath: tls.key
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
      - name: config
        secret:
          secretName: harbor-notary-server
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
  template:
    metadata:
      annotations: null
      labels:
        app: harbor
        component: portal
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - image: goharbor/harbor-portal:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: portal
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: portal-config
          subPath: nginx.conf
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
      - configMap:
          name: harbor-portal
        name: portal-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 4cd0e1cb785dcdebc161f0b7121ef5608372ac3d2898c13f19ddbabdead95f26
        checksum/secret: 9bfab0b3b3090bd4db344c8c9e3851d4f0ef8e6de4f5559a7ff9b1809a10ac43
        checksum/secret-core: a8cc677caf209b10684d4b31c0347f5e3beb6a6be125970b0861e5958540d0f1
        checksum/secret-jobservice: 3d50fb860901a74099f1f0106bd15d59be5c9515bd55dfe0d618d9cfe3731474
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - args:
        - serve
        - /etc/registry/config.yml
        env: null
        envFrom:
        - secretRef:
            name: harbor-registry
        image: goharbor/registry-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registry
        ports:
        - containerPort: 5000
        - containerPort: 5001
        readinessProbe:
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/passwd
          name: registry-htpasswd
          subPath: passwd
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: JOBSERVICE_SECRET
              name: harbor-jobservice
        envFrom:
        - configMapRef:
            name: harbor-registryctl
        - secretRef:
            name: harbor-registry
        - secretRef:
            name: harbor-registryctl
        image: goharbor/harbor-registryctl:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registryctl
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /etc/registryctl/config.yml
          name: registry-config
          subPath: ctl-config.yml
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - name: registry-htpasswd
        secret:
          items:
          - key: REGISTRY_HTPASSWD
            path: passwd
          secretName: harbor-registry-htpasswd
      - configMap:
          name: harbor-registry
        name: registry-config
      - emptyDir: {}
        name: registry-data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-redis
  template:
    metadata:
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - image: goharbor/redis-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 300
          periodSeconds: 10
          tcpSocket:
            port: 6379
        name: redis
        readinessProbe:
          initialDelaySeconds: 1
          periodSeconds: 10
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /var/lib/redis
          name: data
          subPath: null
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
  volumeClaimTemplates:
  - metadata:
      annotations: null
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: trivy
    heritage: Helm
    release: harbor
  name: harbor-trivy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: trivy
      release: harbor
  serviceName: harbor-trivy
  template:
    metadata:
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
      labels:
        app: harbor
        chart: harbor
        component: trivy
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
        - name: SCANNER_LOG_LEVEL
          value: info
        - name: SCANNER_TRIVY_CACHE_DIR
          value: /home/scanner/.cache/trivy
        - name: SCANNER_TRIVY_REPORTS_DIR
          value: /home/scanner/.cache/reports
        - name: SCANNER_TRIVY_DEBUG_MODE
          value: "false"
        - name: SCANNER_TRIVY_VULN_TYPE
          value: os,library
        - name: SCANNER_TRIVY_TIMEOUT
          value: 5m0s
        - name: SCANNER_TRIVY_GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              key: gitHubToken
              name: harbor-trivy
        - name: SCANNER_TRIVY_SEVERITY
          value: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        - name: SCANNER_TRIVY_IGNORE_UNFIXED
          value: "false"
        - name: SCANNER_TRIVY_SKIP_UPDATE
          value: "false"
        - name: SCANNER_TRIVY_OFFLINE_SCAN
          value: "false"
        - name: SCANNER_TRIVY_SECURITY_CHECKS
          value: vuln
        - name: SCANNER_TRIVY_INSECURE
          value: "false"
        - name: SCANNER_API_SERVER_ADDR
          value: :8080
        - name: SCANNER_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        - name: SCANNER_JOB_QUEUE_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        image: goharbor/trivy-adapter-photon:v2.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /probe/healthy
            port: api-server
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
        name: trivy
        ports:
        - containerPort: 8080
          name: api-server
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /probe/ready
            port: api-server
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
        - mountPath: /home/scanner/.cache
          name: data
          readOnly: false
          subPath: null
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
  volumeClaimTemplates:
  - metadata:
      annotations: null
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
spec:
  rules:
  - host: core.harbor.domain
    http:
      paths:
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /api/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /service/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /v2/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /chartrepo/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /c/
        pathType: Prefix
      - backend:
          service:
            name: harbor-portal
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - core.harbor.domain
    secretName: harbor-ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress-notary
spec:
  rules:
  - host: notary.harbor.domain
    http:
      paths:
      - backend:
          service:
            name: harbor-notary-server
            port:
              number: 4443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - notary.harbor.domain
    secretName: harbor-ingress
